# Multi-stage Dockerfile for Zoe WhatsApp Bot
FROM golang:1.24-bullseye as go-builder

# Set working directory for Go build
WORKDIR /go-build

# Copy Go source files
COPY crates/whatsmeow/whatsmeow.go ./
COPY crates/whatsmeow/go.mod ./
COPY crates/whatsmeow/go.sum ./

# Build the Go static library
RUN go build -buildmode=c-archive -o libwhatsmeow.a whatsmeow.go

# Rust builder stage
FROM rust:latest as rust-builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libsqlcipher-dev \
    protobuf-compiler \
    cmake \
    gcc \
    libc6-dev \
    libclang-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy workspace configuration
COPY Cargo.toml Cargo.lock ./
COPY crates/ ./crates/
COPY test/ ./test/

# Copy the Go static library from the go-builder stage
COPY --from=go-builder /go-build/libwhatsmeow.a ./crates/whatsmeow/
COPY --from=go-builder /go-build/libwhatsmeow.h ./crates/whatsmeow/

# Build the WhatsApp bot binary in release mode
RUN cargo build --release --bin zoe-wa-bot

# Runtime stage - minimal image
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user for security
RUN useradd -r -s /bin/false -m -d /app zoe

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=rust-builder /app/target/release/zoe-wa-bot ./zoe-wa-bot

# Create data directory structure for WhatsApp database
RUN mkdir -p /app/data && chown -R zoe:zoe /app

# Switch to app user
USER zoe

# Health check - check if the binary can start and show help
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ./zoe-wa-bot --help > /dev/null || exit 1

# Default command - can be overridden
CMD ["./zoe-wa-bot"]