name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'crates/relay/**'
      - '.github/workflows/docker.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/zoe-relay

jobs:
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/zoe-relay-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: zoe-relay-image
          path: /tmp/zoe-relay-image.tar
          retention-days: 1

  docker-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: zoe-relay-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/zoe-relay-image.tar

      - name: Create test environment file
        run: |
          cat > .env << EOF
          ZOERELAY_EXTERNAL_ADDRESSES=test.example.com
          ZOERELAY_INTERFACE=0.0.0.0
          ZOERELAY_PORT=13908
          ZOERELAY_NAME=Test Relay Server
          ZOERELAY_DATA_DIR=/app/data
          ZOERELAY_REDIS_URL=redis://redis:6379
          ZOE_DATA_PATH=./test-data
          REDIS_DATA_PATH=./test-redis-data
          RUST_LOG=info
          EOF

      - name: Create test data directories
        run: |
          mkdir -p test-data test-redis-data
          chmod 755 test-data test-redis-data

      - name: Start services with docker-compose
        run: |
          # Use the loaded image instead of building
          export IMAGE_TAG=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep zoe-relay | head -1 | awk '{print $1}')
          echo "Using image: $IMAGE_TAG"
          
          # Modify docker-compose to use the built image
          sed -i "s|build:|#build:|g" docker-compose.yml
          sed -i "s|context: \.|#context: \.|g" docker-compose.yml
          sed -i "s|dockerfile: Dockerfile|#dockerfile: Dockerfile|g" docker-compose.yml
          sed -i "s|container_name: zoe-relay|image: $IMAGE_TAG\n    container_name: zoe-relay|g" docker-compose.yml
          
          # Start services
          docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for Redis to be ready..."
          timeout 60 bash -c 'until docker-compose exec -T redis redis-cli ping; do sleep 2; done'
          
          echo "Waiting for Zoe Relay to be ready..."
          timeout 120 bash -c 'until docker-compose logs zoe-relay | grep -q "Starting Zoe Relay Server"; do sleep 2; done'

      - name: Test Redis connectivity
        run: |
          echo "Testing Redis connectivity..."
          docker-compose exec -T redis redis-cli ping
          docker-compose exec -T redis redis-cli info server

      - name: Test Zoe Relay startup
        run: |
          echo "Checking Zoe Relay logs..."
          docker-compose logs zoe-relay
          
          echo "Verifying server started successfully..."
          docker-compose logs zoe-relay | grep -q "Starting Zoe Relay Server" || exit 1
          
          echo "Checking if server key was generated..."
          docker-compose logs zoe-relay | grep -q "Server identity" || exit 1

      - name: Test server key persistence
        run: |
          echo "Checking if server key file was created..."
          docker-compose exec -T zoe-relay ls -la /app/data/
          docker-compose exec -T zoe-relay test -f /app/data/server.key || exit 1
          
          echo "Verifying key file is not empty..."
          docker-compose exec -T zoe-relay test -s /app/data/server.key || exit 1

      - name: Test port accessibility
        run: |
          echo "Testing if relay port is accessible..."
          timeout 10 bash -c 'until nc -z localhost 13908; do sleep 1; done' || exit 1
          echo "Port 13908 is accessible"

      - name: Test service health checks
        run: |
          echo "Checking service health status..."
          docker-compose ps
          
          # Check if services are healthy
          docker-compose ps | grep -q "healthy" || echo "Health checks not yet complete"

      - name: Test restart persistence
        run: |
          echo "Testing server key persistence across restarts..."
          
          # Get the original key ID
          ORIGINAL_KEY=$(docker-compose logs zoe-relay | grep "Server identity" | head -1)
          echo "Original key: $ORIGINAL_KEY"
          
          # Restart the relay service
          docker-compose restart zoe-relay
          
          # Wait for restart
          sleep 10
          timeout 60 bash -c 'until docker-compose logs zoe-relay | tail -20 | grep -q "Starting Zoe Relay Server"; do sleep 2; done'
          
          # Check if the same key is used
          NEW_KEY=$(docker-compose logs zoe-relay | grep "Server identity" | tail -1)
          echo "New key: $NEW_KEY"
          
          # The key should be the same (loaded from file)
          if [[ "$ORIGINAL_KEY" == "$NEW_KEY" ]]; then
            echo "✅ Server key persisted correctly across restart"
          else
            echo "❌ Server key changed after restart - persistence failed"
            exit 1
          fi

      - name: Show final logs for debugging
        if: always()
        run: |
          echo "=== Zoe Relay Logs ==="
          docker-compose logs zoe-relay
          echo "=== Redis Logs ==="
          docker-compose logs redis
          echo "=== Container Status ==="
          docker-compose ps

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f
          rm -rf test-data test-redis-data

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: zoe-relay-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/zoe-relay-image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'zoe-relay:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'