name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
          
      - name: Check all targets
        run: cargo check --workspace --all-targets

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
      
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit
          
      - name: Run security audit
        run: cargo audit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for codecov to properly track git history
          
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
      
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Generate code coverage
        run: |
          cargo llvm-cov clean --workspace
          cargo llvm-cov nextest --workspace --lcov --output-path coverage.lcov
        env:
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-examples:
    name: Build Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
      
      - name: Build examples (excluding problematic crates)
        run: |
          cargo build --examples --workspace --exclude whatsmeow --exclude wa-bot

  compile-targets-zoe-client:
    name: Zoe Client Compile
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Apple targets - run on macOS
          - target: aarch64-apple-ios
            os: macos-latest
          - target: x86_64-apple-ios
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          # Android targets - run on Linux
          - target: aarch64-linux-android
            os: ubuntu-latest
          - target: armv7-linux-androideabi
            os: ubuntu-latest
          - target: x86_64-linux-android
            os: ubuntu-latest
          - target: i686-linux-android
            os: ubuntu-latest
          # Linux targets - run on Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          # Windows targets - run on Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
          
      - name: Install SQLCipher and Protobuf (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install sqlcipher protobuf cmake llvm
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
          echo "LIBCLANG_PATH=/opt/homebrew/opt/llvm/lib" >> $GITHUB_ENV
          
      - name: Install Protobuf and CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install protoc cmake
          
      - name: Install Android NDK (Linux)
        if: contains(matrix.target, 'android') && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          unzip -q android-ndk-r25c-linux.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r25c" >> $GITHUB_ENV
          echo "NDK_HOME=$PWD/android-ndk-r25c" >> $GITHUB_ENV
          
      - name: Install bindgen-cli (Linux)
        if: contains(matrix.target, 'android') && matrix.os == 'ubuntu-latest'
        run: |
          cargo install --force --locked bindgen-cli
          
      - name: Setup Android environment (Linux)
        if: contains(matrix.target, 'android') && matrix.os == 'ubuntu-latest'
        run: |
          # Setup linker paths for Android targets
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-linux-android]
          linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          
          [target.armv7-linux-androideabi]
          linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
          
          [target.x86_64-linux-android]
          linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
          
          [target.i686-linux-android]
          linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
          EOF
          
          # Set environment variables for C compilers (needed by ring and other native crates)
          echo "CC_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CC_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
          echo "CC_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
          echo "CC_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang" >> $GITHUB_ENV
          
          # Also set AR (archiver) for each target
          echo "AR_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "AR_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "AR_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "AR_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          
          # Set BINDGEN_EXTRA_CLANG_ARGS for aws-lc-sys to find Android headers
          ANDROID_SYSROOT="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          echo "BINDGEN_EXTRA_CLANG_ARGS_aarch64_linux_android=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/aarch64-linux-android" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS_armv7_linux_androideabi=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/arm-linux-androideabi" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS_x86_64_linux_android=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/x86_64-linux-android" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS_i686_linux_android=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/i686-linux-android" >> $GITHUB_ENV
          
      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
          # Setup linker configuration for aarch64-unknown-linux-gnu
          mkdir -p ~/.cargo
          cat >> ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF
          
          # Set environment variables for C compiler and archiver (needed by ring and other native crates)
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          
      - name: Cross compile zoe-client for ${{ matrix.target }}
        run: |
          cargo build --release --target ${{ matrix.target }} --package zoe-client

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
      
      - name: Check documentation
        run: cargo doc --workspace --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-Dwarnings"

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [check, lint, test, documentation]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
      
      - name: Generate documentation
        run: |
          cargo doc --workspace --no-deps --document-private-items
          echo '<meta http-equiv="refresh" content="0; url=zoe_client">' > target/doc/index.html
        env:
          RUSTDOCFLAGS: "--cfg docsrs"
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc
      
      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/configure-pages@v4
          
      - name: Deploy to GitHub Pages
        id: deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/deploy-pages@v4

  test-rust-toolchains:
    name: Tests on extra toolchains
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, nightly]
    
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
        
      - name: Install SQLCipher and Protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
          
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Run fast tests
        run: |
          cargo nextest run --profile fast --workspace
        env:
          REDIS_URL: redis://localhost:6379