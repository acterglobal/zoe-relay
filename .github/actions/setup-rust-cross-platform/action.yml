name: 'Setup Rust Cross-Platform Environment'
description: 'Sets up Rust toolchain and cross-compilation environment for specified targets'

inputs:
  targets:
    description: 'Comma-separated list of targets to install'
    required: false
    default: 'x86_64-unknown-linux-gnu'
  
  rust_version:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'   # Default rust version to use

  components:
    description: 'Comma-separated list of additional rust components to install'
    required: false
    default: ''

  tools:
    description: 'Comma-separated list of additional rust tools to install'
    required: false
  
  workspace_path:
    description: 'Path to Rust workspace (relative to repo root)'
    required: false
  
  install_android_ndk:
    description: 'Whether to install Android NDK'
    required: false
    default: 'false'

  

outputs:
  cache_key:
    description: 'Rust cache key used'
    value: ${{ steps.cache.outputs.cache-primary-key }}


runs:
  using: 'composite'
  steps:
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_version }}
        targets: ${{ inputs.targets }}
        components: ${{ inputs.components || '' }}
  
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      id: cache
      with:
        workspaces: ${{ inputs.workspace_path || '' }}
  
    - name: Installing ${{ inputs.tools || '' }}
      if: inputs.tools != ''
      uses: taiki-e/install-action@v2
      with:
        tool: ${{ inputs.tools || '' }}
    
    - name: Install SQLCipher and Protobuf (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake
    
    - name: Install SQLCipher and Protobuf (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew uninstall --ignore-dependencies cmake || true
        brew install sqlcipher protobuf cmake llvm
        echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
        echo "LIBCLANG_PATH=/opt/homebrew/opt/llvm/lib" >> $GITHUB_ENV
    
    - name: Install Protobuf and CMake (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        choco install protoc cmake
    
    - name: Install bindgen-cli (non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cargo install --force --locked bindgen-cli
    
    - name: Install Android NDK
      if: inputs.install_android_ndk == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get install -y wget unzip
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        unzip -q android-ndk-r25c-linux.zip
        echo "ANDROID_NDK_HOME=$PWD/android-ndk-r25c" >> $GITHUB_ENV
        echo "NDK_HOME=$PWD/android-ndk-r25c" >> $GITHUB_ENV
    
    - name: Setup Android environment
      if: inputs.install_android_ndk == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p ~/.cargo
        cat >> ~/.cargo/config.toml << 'CARGO_EOF'
        [target.aarch64-linux-android]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
        
        [target.armv7-linux-androideabi]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
        
        [target.x86_64-linux-android]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
        
        [target.i686-linux-android]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
        CARGO_EOF
        
        # Set environment variables for C compilers
        echo "CC_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
        echo "CC_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang" >> $GITHUB_ENV
        echo "CC_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang" >> $GITHUB_ENV
        echo "CC_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang" >> $GITHUB_ENV
        
        # Set AR (archiver) for each target
        echo "AR_aarch64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "AR_armv7_linux_androideabi=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "AR_x86_64_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        echo "AR_i686_linux_android=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
        
        # Set BINDGEN_EXTRA_CLANG_ARGS for aws-lc-sys to find Android headers
        ANDROID_SYSROOT="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        echo "BINDGEN_EXTRA_CLANG_ARGS_aarch64_linux_android=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/aarch64-linux-android" >> $GITHUB_ENV
        echo "BINDGEN_EXTRA_CLANG_ARGS_armv7_linux_androideabi=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/arm-linux-androideabi" >> $GITHUB_ENV
        echo "BINDGEN_EXTRA_CLANG_ARGS_x86_64_linux_android=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/x86_64-linux-android" >> $GITHUB_ENV
        echo "BINDGEN_EXTRA_CLANG_ARGS_i686_linux_android=--sysroot=$ANDROID_SYSROOT -I$ANDROID_SYSROOT/usr/include -I$ANDROID_SYSROOT/usr/include/i686-linux-android" >> $GITHUB_ENV
    
    - name: Install cross-compilation tools (Linux ARM)
      if: contains(inputs.targets, 'aarch64-unknown-linux-gnu') && runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
        # Setup linker configuration for aarch64-unknown-linux-gnu
        mkdir -p ~/.cargo
        cat >> ~/.cargo/config.toml << 'CARGO_EOF'
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        CARGO_EOF
        
        # Set environment variables for C compiler and archiver
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
