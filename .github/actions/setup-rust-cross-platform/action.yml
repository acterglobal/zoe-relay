name: 'Setup Rust Cross-Platform Environment'
description: 'Sets up Rust toolchain and cross-compilation environment for specified targets'

inputs:
  targets:
    description: 'Comma-separated list of targets to install'
    required: false
    default: 'x86_64-unknown-linux-gnu'
  
  rust_version:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'   # Default rust version to use

  components:
    description: 'Comma-separated list of additional rust components to install'
    required: false
    default: ''

  tools:
    description: 'Comma-separated list of additional rust tools to install'
    required: false
  
  workspace_path:
    description: 'Path to Rust workspace (relative to repo root)'
    required: false
    default: '.'
  
  install_android_ndk:
    description: 'Whether to install Android NDK'
    required: false
    default: 'false'

outputs:
  cache_key:
    description: 'Rust cache key used'
    value: ${{ steps.cache.outputs.cache-primary-key }}

env:
  NDK_VERSION: '27.0.12077973'
  ANDROID_MIN_VERSION: '21'

runs:
  using: 'composite'
  steps:
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_version }}
        targets: ${{ inputs.targets }}
        components: ${{ inputs.components || '' }}
  
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      id: cache
      with:
        workspaces: ${{ inputs.workspace_path || '' }}
  
    - name: Installing ${{ inputs.tools || '' }}
      if: inputs.tools != ''
      uses: taiki-e/install-action@v2
      with:
        tool: ${{ inputs.tools || '' }}
    
    - name: Update package lists (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        # Update package lists with retry logic
        for i in {1..3}; do
          if sudo apt-get update; then
            break
          fi
          echo "Initial apt-get update failed, retrying in 5 seconds... ($i/3)"
          sleep 5
        done

    - name: Install base dependencies (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get install -y libsqlcipher-dev protobuf-compiler cmake

    - name: Set SQLCipher paths for native Linux builds
      if: runner.os == 'Linux' && !contains(inputs.targets, 'android')
      shell: bash
      run: |
        # Only set SQLCipher paths for native Linux builds, not Android cross-compilation
        echo "SQLCIPHER_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
        echo "SQLCIPHER_INCLUDE_DIR=/usr/include/sqlcipher" >> $GITHUB_ENV

    - name: Try installing ARM64 packages (simple approach)
      if: runner.os == 'Linux' && contains(inputs.targets, 'aarch64-unknown-linux-gnu')
      id: arm64-simple
      shell: bash
      continue-on-error: true
      run: |
        echo "Setting up ARM64 cross-compilation environment..."
        sudo apt-get install -y libssl-dev pkg-config gcc-aarch64-linux-gnu

    - name: Setup ARM64 architecture and repositories (fallback)
      if: runner.os == 'Linux' && contains(inputs.targets, 'aarch64-unknown-linux-gnu') && steps.arm64-simple.outcome == 'failure'
      shell: bash
      run: |
        echo "Standard ARM64 packages not available, trying with architecture setup..."
        
        # Add arm64 architecture and configure sources for cross-compilation
        sudo dpkg --add-architecture arm64
        
        # Update sources.list to include ports for arm64 packages (without security repo)
        sudo tee /etc/apt/sources.list.d/arm64-cross.list > /dev/null <<EOF
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-updates main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ noble-backports main restricted universe multiverse
        EOF
        
        # Update package lists with retry logic and error handling
        echo "Updating package lists for ARM64 cross-compilation..."
        for i in {1..3}; do
          if sudo apt-get update -o APT::Update::Error-Mode=any; then
            echo "Package lists updated successfully"
            break
          fi
          echo "apt-get update failed, retrying in 10 seconds... ($i/3)"
          sleep 10
          if [ $i -eq 3 ]; then
            echo "Warning: apt-get update failed after 3 attempts, continuing anyway..."
            # Try to continue with available packages
          fi
        done

        # Install cross-compilation packages with fallback
        if ! sudo apt-get install -y libssl-dev:arm64 libssl-dev pkg-config gcc-aarch64-linux-gnu; then
          echo "Failed to install ARM64 packages, trying alternative approach..."
          # Fallback: install only what's available
          sudo apt-get install -y --no-install-recommends libssl-dev pkg-config gcc-aarch64-linux-gnu || true
        fi

    - name: Configure ARM64 cross-compilation environment
      if: runner.os == 'Linux' && contains(inputs.targets, 'aarch64-unknown-linux-gnu')
      shell: bash
      run: |
        # Set up pkg-config for cross-compilation
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
        echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
    
    - name: Install base dependencies (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew uninstall --ignore-dependencies cmake || true
        brew install sqlcipher protobuf cmake llvm
        echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
        echo "LIBCLANG_PATH=/opt/homebrew/opt/llvm/lib" >> $GITHUB_ENV

    - name: Set SQLCipher paths & iOS deployment for  iOS builds
      if: runner.os == 'macOS' && !contains(inputs.targets, 'apple-ios')
      shell: bash
      run: |
        # Set SQLCipher library paths for Rust linking (macOS only, not iOS)
        echo "LIBRARY_PATH=/opt/homebrew/lib:/usr/local/lib" >> $GITHUB_ENV
        echo "SQLCIPHER_LIB_DIR=/opt/homebrew/lib" >> $GITHUB_ENV
        echo "SQLCIPHER_INCLUDE_DIR=/opt/homebrew/include" >> $GITHUB_ENV
        
        # Set iOS deployment target to avoid version mismatch
        echo "IPHONEOS_DEPLOYMENT_TARGET=12.0" >> $GITHUB_ENV

    - name: Configure iOS x86_64 simulator target
      if: runner.os == 'macOS' && contains(inputs.targets, 'x86_64-apple-ios')
      shell: bash
      run: |
        IOS_SDK_PATH=$(xcrun --sdk iphonesimulator --show-sdk-path)
        echo "BINDGEN_EXTRA_CLANG_ARGS_x86_64_apple_ios=-isysroot $IOS_SDK_PATH -target x86_64-apple-ios-simulator -mios-simulator-version-min=12.0" >> $GITHUB_ENV
        echo "CARGO_TARGET_X86_64_APPLE_IOS_LINKER=$(xcrun --find --sdk iphonesimulator clang)" >> $GITHUB_ENV
        echo "CC_x86_64_apple_ios=$(xcrun --find --sdk iphonesimulator clang)" >> $GITHUB_ENV
        echo "AR_x86_64_apple_ios=$(xcrun --find --sdk iphonesimulator ar)" >> $GITHUB_ENV
        echo "CFLAGS_x86_64_apple_ios=-mios-simulator-version-min=12.0" >> $GITHUB_ENV

    - name: Configure iOS aarch64 device target
      if: runner.os == 'macOS' && contains(inputs.targets, 'aarch64-apple-ios')
      shell: bash
      run: |
        IOS_SDK_PATH=$(xcrun --sdk iphoneos --show-sdk-path)
        echo "BINDGEN_EXTRA_CLANG_ARGS_aarch64_apple_ios=-isysroot $IOS_SDK_PATH -target arm64-apple-ios -mios-version-min=12.0" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_APPLE_IOS_LINKER=$(xcrun --find --sdk iphoneos clang)" >> $GITHUB_ENV
        echo "CC_aarch64_apple_ios=$(xcrun --find --sdk iphoneos clang)" >> $GITHUB_ENV
        echo "AR_aarch64_apple_ios=$(xcrun --find --sdk iphoneos ar)" >> $GITHUB_ENV
        echo "CFLAGS_aarch64_apple_ios=-mios-version-min=12.0" >> $GITHUB_ENV

    - name: Configure iOS aarch64 simulator target
      if: runner.os == 'macOS' && contains(inputs.targets, 'aarch64-apple-ios-sim')
      shell: bash
      run: |
        IOS_SDK_PATH=$(xcrun --sdk iphonesimulator --show-sdk-path)
        echo "BINDGEN_EXTRA_CLANG_ARGS_aarch64_apple_ios_sim=-isysroot $IOS_SDK_PATH -target arm64-apple-ios-simulator -mios-simulator-version-min=12.0" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_APPLE_IOS_SIM_LINKER=$(xcrun --find --sdk iphonesimulator clang)" >> $GITHUB_ENV
        echo "CC_aarch64_apple_ios_sim=$(xcrun --find --sdk iphonesimulator clang)" >> $GITHUB_ENV
        echo "AR_aarch64_apple_ios_sim=$(xcrun --find --sdk iphonesimulator ar)" >> $GITHUB_ENV
        echo "CFLAGS_aarch64_apple_ios_sim=-mios-simulator-version-min=12.0" >> $GITHUB_ENV
    
    - name: Install SQLCipher, Protobuf and CMake (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Install vcpkg for SQLCipher
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        
        # Install SQLCipher via vcpkg
        C:\vcpkg\vcpkg.exe install sqlcipher:x64-windows
        
        # Install other dependencies via chocolatey
        choco install protoc cmake nasm
        
        # Add NASM to PATH for aws-lc-sys
        echo "C:\Program Files\NASM" >> $env:GITHUB_PATH
        
        # Set SQLCipher environment variables for Rust
        echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
        echo "SQLCIPHER_LIB_DIR=C:\vcpkg\installed\x64-windows\lib" >> $env:GITHUB_ENV
        echo "SQLCIPHER_INCLUDE_DIR=C:\vcpkg\installed\x64-windows\include" >> $env:GITHUB_ENV
    
    - name: Install bindgen-cli (non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cargo install --force --locked bindgen-cli

    - name: Setup Android SDK (Android builds only)
      if: inputs.install_android_ndk == 'true'
      uses: android-actions/setup-android@v3
      
    - name: Install Android NDK (${ env.NDK_VERSION })
      if: inputs.install_android_ndk == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        set -e
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "ndk;${ env.NDK_VERSION }"
        ANDROID_NDK_HOME="$ANDROID_SDK_ROOT/ndk/${ env.NDK_VERSION }"

        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

        # Create symlinks for OpenSSL build tools
        # The OpenSSL build system expects GNU-style tool names, but Android NDK uses LLVM
        mkdir -p /tmp/android-tools
        ln -sf "$PWD/$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" "/tmp/android-tools/arm-linux-androideabi-ranlib"
        ln -sf "$PWD/$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" "/tmp/android-tools/aarch64-linux-android-ranlib"
        ln -sf "$PWD/$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" "/tmp/android-tools/i686-linux-android-ranlib"
        ln -sf "$PWD/$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" "/tmp/android-tools/x86_64-linux-android-ranlib"
        
        # Add tools directory to PATH
        echo "/tmp/android-tools:$PWD/$NDK_DIR/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_PATH
        
        mkdir -p ~/.cargo
        cat >> ~/.cargo/config.toml << CARGO_EOF
        # Cargo configuration for Android cross-compilation
        [target.armv7-linux-androideabi]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
        
        [target.aarch64-linux-android]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
        
        [target.i686-linux-android]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
        
        [target.x86_64-linux-android]
        linker = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
        
        [env]
        # Android NDK configuration
        ANDROID_NDK_HOME = "$ANDROID_NDK_HOME"
        NDK_HOME = "$ANDROID_NDK_HOME"
        ANDROID_NDK_ROOT = "$ANDROID_NDK_HOME"
        ANDROID_NDK = "$ANDROID_NDK_HOME"
        
        # Target-specific compilers
        CC_armv7_linux_androideabi = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
        CXX_armv7_linux_androideabi = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang++"
        AR_armv7_linux_androideabi = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        RANLIB_armv7_linux_androideabi = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        
        CC_aarch64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
        CXX_aarch64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++"
        AR_aarch64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        RANLIB_aarch64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        
        CC_i686_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
        CXX_i686_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang++"
        AR_i686_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        RANLIB_i686_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        
        CC_x86_64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
        CXX_x86_64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang++"
        AR_x86_64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        RANLIB_x86_64_linux_android = "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        
        # Android platform configuration
        ANDROID_PLATFORM = "android-${ env.ANDROID_MIN_VERSION }"
        ANDROID_NATIVE_API_LEVEL = "${ env.ANDROID_MIN_VERSION }"
        
        # CMake configuration for Android
        CMAKE_TOOLCHAIN_FILE = "$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
        CMAKE_ANDROID_NDK = "$ANDROID_NDK_HOME"
        CMAKE_ANDROID_API = "${ env.ANDROID_MIN_VERSION }"
        CMAKE_ANDROID_API_MIN = "${ env.ANDROID_MIN_VERSION }"
        
        # Target-specific CMake configuration
        CMAKE_TOOLCHAIN_FILE_x86_64_linux_android = "$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
        CMAKE_TOOLCHAIN_FILE_armv7_linux_androideabi = "$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
        CMAKE_TOOLCHAIN_FILE_aarch64_linux_android = "$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
        CMAKE_TOOLCHAIN_FILE_i686_linux_android = "$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
        
        # Android ABI configuration per target
        CMAKE_ANDROID_ARCH_ABI_x86_64_linux_android = "x86_64"
        CMAKE_ANDROID_ARCH_ABI_armv7_linux_androideabi = "armeabi-v7a"
        CMAKE_ANDROID_ARCH_ABI_aarch64_linux_android = "arm64-v8a"
        CMAKE_ANDROID_ARCH_ABI_i686_linux_android = "x86"
        
        ANDROID_ABI_x86_64_linux_android = "x86_64"
        ANDROID_ABI_armv7_linux_androideabi = "armeabi-v7a"
        ANDROID_ABI_aarch64_linux_android = "arm64-v8a"
        ANDROID_ABI_i686_linux_android = "x86"

        # Force bundled SQLite to avoid OpenSSL dependency issues
        LIBSQLITE3_SYS_USE_PKG_CONFIG = "0"
        LIBSQLITE3_SYS_USE_BUNDLED = "1"
        SQLCIPHER_STATIC = "1"
        
        
        # BINDGEN configuration for header resolution
        BINDGEN_EXTRA_CLANG_ARGS_x86_64_linux_android = "--sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/x86_64-linux-android"
        BINDGEN_EXTRA_CLANG_ARGS_armv7_linux_androideabi = "--sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/arm-linux-androideabi"
        BINDGEN_EXTRA_CLANG_ARGS_aarch64_linux_android = "--sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
        BINDGEN_EXTRA_CLANG_ARGS_i686_linux_android = "--sysroot=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/i686-linux-android"
        CARGO_EOF
        
        # Replace $ANDROID_NDK_HOME with actual path in config file
        sed -i "s|\$ANDROID_NDK_HOME|$ANDROID_NDK_HOME|g" ~/.cargo/config.toml
    
    - name: Install cross-compilation tools (Linux ARM)
      if: runner.os == 'Linux' && contains(inputs.targets, 'aarch64-unknown-linux-gnu')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

        # Setup linker configuration for aarch64-unknown-linux-gnu
        mkdir -p ~/.cargo
        cat >> ~/.cargo/config.toml << 'CARGO_EOF'
        [target.aarch64-unknown-linux-gnu]
        linker = "aarch64-linux-gnu-gcc"
        CARGO_EOF

    - name: Set ARM64 cross-compilation environment variables
      if: runner.os == 'Linux' && contains(inputs.targets, 'aarch64-unknown-linux-gnu')
      shell: bash
      run: |
        # Set environment variables for C compiler and archiver
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        
        # Set OpenSSL environment for cross-compilation
        echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
    
    - name: Set up Windows i686 target environment
      if: runner.os == 'Windows' && contains(inputs.targets, 'i686-pc-windows-msvc')
      shell: powershell
      run: |
        # Set C standard to C11 for aws-lc-sys on i686 Windows
        echo "AWS_LC_SYS_C_STD=11" >> $env:GITHUB_ENV
        # Ensure NASM is available
        echo "CMAKE_ASM_NASM_COMPILER=C:\Program Files\NASM\nasm.exe" >> $env:GITHUB_ENV
    
    - name: Debug environment setup
      shell: bash
      run: |
        echo "=== Environment Debug ==="
        echo "Targets: ${{ inputs.targets }}"
        echo "Rust version: ${{ inputs.rust_version }}"
        echo "Workspace path: ${{ inputs.workspace_path }}"
        echo "Install Android NDK: ${{ inputs.install_android_ndk }}"
        
        if [ "${{ inputs.install_android_ndk }}" = "true" ]; then
          echo "ANDROID_NDK_HOME: ${ANDROID_NDK_HOME:-not set}"
        fi
        
        echo "=== Cargo config ==="
        if [ -f ~/.cargo/config.toml ]; then
          cat ~/.cargo/config.toml
        else
          echo "No cargo config found"
        fi
