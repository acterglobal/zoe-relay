# Docker Compose for Zoe Network Services
# Production-ready setup with Redis, Relay Server, and WhatsApp Bot

services:
  zoe-relay:
    build:
      context: .
      dockerfile: docker/Dockerfile.relay
    restart: unless-stopped
    depends_on:
      - zoe-redis
    ports:
      - "${ZOERELAY_PORT:-13908}:13908/udp"
    environment:
      # Network configuration
      - ZOERELAY_PORT=13908
      - ZOERELAY_INTERFACE=0.0.0.0
      - ZOERELAY_EXTERNAL_ADDRESSES=${ZOERELAY_EXTERNAL_ADDRESSES:-localhost}
      - ZOERELAY_NAME=${ZOERELAY_NAME:-Zoe Relay Server}
      # Logging
      - RUST_LOG=${RUST_LOG:-info}
      - ZOERELAY_REDIS_URL=${ZOERELAY_REDIS_URL:-redis://zoe-redis:6379}
    volumes:
      # Persistent storage for server keys and blob data
      - zoe_data:/app/data
      # Optional: custom configuration
      # - ./config:/app/config:ro
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/udp/localhost/13908' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - zoe-network

  zoe-wa-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.wa-bot
    restart: unless-stopped
    depends_on:
      zoe-relay:
        condition: service_healthy
    environment:
      # Relay connection - automatically discover relay server
      - ZOE_RELAY_ADDRESS=zoe-relay:13908
      - ZOE_SERVER_KEY=${ZOE_SERVER_KEY:-}  # Will be auto-generated if not provided
      # WhatsApp configuration
      - WHATSAPP_DB_PATH=/app/data/whatsapp.db
      - MAX_CONNECTION_ATTEMPTS=${MAX_CONNECTION_ATTEMPTS:-10}
      # Logging
      - RUST_LOG=${RUST_LOG:-info}
      # Bot mode - can be overridden
      - BOT_MODE=${BOT_MODE:-bridge}  # bridge, listen, or custom command
    volumes:
      # Persistent storage for WhatsApp database and bot data
      - zoe_wa_bot_data:/app/data
    healthcheck:
      test: ["CMD", "./zoe-wa-bot", "--help"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - zoe-network
    # Override command based on BOT_MODE environment variable
    command: >
      sh -c '
        case "$${BOT_MODE}" in
          "listen")
            exec ./zoe-wa-bot --server-key "$${ZOE_SERVER_KEY}" --relay-address "$${ZOE_RELAY_ADDRESS}" listen --show-timestamps
            ;;
          "bridge")
            exec ./zoe-wa-bot --server-key "$${ZOE_SERVER_KEY}" --relay-address "$${ZOE_RELAY_ADDRESS}"
            ;;
          *)
            exec ./zoe-wa-bot --server-key "$${ZOE_SERVER_KEY}" --relay-address "$${ZOE_RELAY_ADDRESS}" $${BOT_MODE}
            ;;
        esac
      '

  zoe-redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - zoe_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - zoe-network

networks:
  zoe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Persistent storage for relay server data (keys, blobs, etc.)
  zoe_data:
    driver: local
  
  # Persistent storage for WhatsApp bot data (database, session, etc.)
  zoe_wa_bot_data:
    driver: local
  
  # Persistent storage for Redis data
  zoe_redis_data:
    driver: local