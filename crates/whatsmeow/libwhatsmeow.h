/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "whatsmeow.go"

#include <stdlib.h>
#include <stdint.h>

// Forward declarations for Rust callback functions
typedef struct {
    int success;
    char* data;
    char* error;
} CResponse;

typedef struct {
    char* status;
    char* error;
} CStatusResponse;

extern void rust_status_callback(uintptr_t handle, CStatusResponse* response);
extern void rust_response_callback(uintptr_t handle, CResponse* response);

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Initialize the WhatsApp client
extern GoUint8 whatsmeow_init();

// Connect to WhatsApp
extern void whatsmeow_connect_async(GoUintptr callback_handle);

// Disconnect from WhatsApp
extern void whatsmeow_disconnect_async(GoUintptr callback_handle);

// Get connection status
extern void whatsmeow_get_status_async(GoUintptr callback_handle);

// Get QR code for authentication
extern void whatsmeow_get_qr_async(GoUintptr callback_handle);

// Send a text message
extern void whatsmeow_send_message_async(char* chat_jid, char* text, GoUintptr callback_handle);

// Simplified functions for other operations
extern void whatsmeow_send_image_async(char* chat_jid, char* image_path, char* caption, GoUintptr callback_handle);
extern void whatsmeow_get_contacts_async(GoUintptr callback_handle);
extern void whatsmeow_get_groups_async(GoUintptr callback_handle);
extern void whatsmeow_get_messages_async(char* chat_jid, unsigned int limit, GoUintptr callback_handle);
extern void whatsmeow_create_group_async(char* name, char* participants, GoUintptr callback_handle);
extern void whatsmeow_join_group_async(char* invite_link, GoUintptr callback_handle);
extern void whatsmeow_mark_read_async(char* chat_jid, char* message_id, GoUintptr callback_handle);
extern void whatsmeow_send_reaction_async(char* chat_jid, char* message_id, char* emoji, GoUintptr callback_handle);
extern void whatsmeow_remove_reaction_async(char* chat_jid, char* message_id, GoUintptr callback_handle);
extern void whatsmeow_get_reactions_async(char* chat_jid, char* message_id, GoUintptr callback_handle);
extern void whatsmeow_send_audio_async(char* chat_jid, char* audio_path, char* caption, _Bool is_voice_note, unsigned int duration, GoUintptr callback_handle);
extern void whatsmeow_send_video_async(char* chat_jid, char* video_path, char* caption, char* thumbnail_path, unsigned int duration, GoUintptr callback_handle);
extern void whatsmeow_send_document_async(char* chat_jid, char* document_path, char* filename, char* caption, GoUintptr callback_handle);
extern void whatsmeow_download_media_async(char* chat_jid, char* message_id, char* media_type, char* save_path, GoUintptr callback_handle);
extern void whatsmeow_get_profile_info_async(char* jid, GoUintptr callback_handle);
extern void whatsmeow_get_my_profile_async(GoUintptr callback_handle);
extern void whatsmeow_update_profile_async(char* name, char* status, GoUintptr callback_handle);
extern void whatsmeow_set_profile_picture_async(char* image_path, GoUintptr callback_handle);
extern void whatsmeow_get_profile_picture_async(char* jid, char* save_path, GoUintptr callback_handle);
extern _Bool whatsmeow_start_event_stream(GoUintptr callback_handle);
extern _Bool whatsmeow_stop_event_stream();
extern _Bool whatsmeow_register_message_handler(GoUintptr callback_handle);
extern _Bool whatsmeow_register_presence_handler(GoUintptr callback_handle);
extern _Bool whatsmeow_register_receipt_handler(GoUintptr callback_handle);

// Free Go allocated memory
extern void go_free(char* ptr);

#ifdef __cplusplus
}
#endif
